parameters:
  build_type: ''

steps:
  - template: apple-tools-setup.yml

  - template: apple-install-dependencies.yml

  # Extra steps needed for *-stable releases
  - ${{ if eq( parameters['build_type'], 'release') }}:
    - task: CmdLine@2
      displayName: Set latest tag
      inputs:
        script: |
          LATEST=true
          echo "Set latest to: $LATEST"
      condition: eq(variables['Build.SourceBranchName'], variables.latestStableBranch)

    - task: CmdLine@2
      displayName: Set next package version
      inputs:
        script: |
          echo "##vso[task.setvariable variable=RNM_PACKAGE_VERSION]$(node .ado/get-next-semver-version.js)"
          echo "Next package version: $RNM_PACKAGE_VERSION"

    # Note, This won't do the actual `git tag` and `git push` as we're doing a dry run.
    # We do that as a separate step in `.ado/publish.yml`.
    - task: CmdLine@2
      displayName: Prepare package for release
      inputs:
        script: |
          node ./scripts/prepare-package-for-release.js -v "$RNM_PACKAGE_VERSION" --dry-run
      env:
        # Map the corresponding CircleCI variable since `prepare-package-for-release.js` depends on it.
        CIRCLE_BRANCH: $(Build.SourceBranchName)

  # Note: This won't actually publish to NPM as we've commented that bit out.
  # We do that as a separate step in `.ado/publish.yml`. 
  - task: CmdLine@2
    displayName: Run publish-npm.js
    inputs:
      script: |
        node ./scripts/publish-npm.js -t ${{ parameters.build_type }}
    env:
      # Map the corresponding CircleCI variable since `publish-npm.js` depends on it.
      CIRCLE_TAG: $(RNM_PACKAGE_VERSION)
