diff --git a/ReactAndroid/build.gradle b/ReactAndroid/build.gradle
index cae7d90ada9..c299dac0c5b 100644
--- a/ReactAndroid/build.gradle
+++ b/ReactAndroid/build.gradle
@@ -41,6 +41,8 @@ def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")
 // and the build will use that.
 def boostPath = dependenciesPath ?: System.getenv("REACT_NATIVE_BOOST_PATH")
 
+def V8Path = 'packages/ReactNative.V8Jsi.Android.0.66.0-stable-v2'
+
 // Setup build type for NDK, supported values: {debug, release}
 def nativeBuildType = System.getenv("NATIVE_BUILD_TYPE") ?: "release"
 
@@ -86,11 +88,22 @@ task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
     dest(new File(downloadsDir, "folly-${FOLLY_VERSION}.tar.gz"))
 }
 
+def follyReplaceContent = '''
+  ssize_t r;
+  do {
+    r = open(name, flags, mode);
+  } while (r == -1 && errno == EINTR);
+  return r;
+'''
+
 task prepareFolly(dependsOn: dependenciesPath ? [] : [downloadFolly], type: Copy) {
     from(dependenciesPath ?: tarTree(downloadFolly.dest))
     from("src/main/jni/third-party/folly/Android.mk")
     include("folly-${FOLLY_VERSION}/folly/**/*", "Android.mk")
     eachFile { fname -> fname.path = (fname.path - "folly-${FOLLY_VERSION}/") }
+    // Fixes problem with Folly failing to build on certain systems. See
+    // https://github.com/facebook/react-native/issues/28298
+    filter { line -> line.replaceAll('return int\\(wrapNoInt\\(open, name, flags, mode\\)\\);', follyReplaceContent) }
     includeEmptyDirs = false
     into("$thirdPartyNdkDir/folly")
 }
@@ -144,6 +157,14 @@ task prepareHermes(dependsOn: createNativeDepsDirectories, type: Copy) {
     into "$thirdPartyNdkDir/hermes"
 }
 
+task prepareV8() {
+    copy {
+        from "src/main/jni/third-party/v8jsi/"
+        include("*.mk")
+        into "$thirdPartyNdkDir/v8jsi"
+    }
+}
+
 task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
     src("https://github.com/google/glog/archive/v${GLOG_VERSION}.tar.gz")
     onlyIfNewer(true)
@@ -280,12 +301,7 @@ task androidSourcesJar(type: Jar) {
 
 android {
     compileSdkVersion 31
-
-    // Used to override the NDK path & version on internal CI
-    if (System.getenv("ANDROID_NDK") != null && System.getenv("LOCAL_ANDROID_NDK_VERSION") != null) {
-        ndkPath System.getenv("ANDROID_NDK")
-        ndkVersion System.getenv("LOCAL_ANDROID_NDK_VERSION")
-    }
+    ndkVersion "25.0.8775105"
 
     defaultConfig {
         minSdkVersion(21)
@@ -312,6 +328,7 @@ android {
                         "REACT_COMMON_DIR=$projectDir/../ReactCommon",
                         "REACT_GENERATED_SRC_DIR=$buildDir/generated/source",
                         "REACT_SRC_DIR=$projectDir/src/main/java/com/facebook/react",
+                        "V8_NUGET_DIR=$projectDir/$V8Path",
                         "-j${ndkBuildJobs()}"
 
                 if (Os.isFamily(Os.FAMILY_MAC)) {
@@ -331,7 +348,7 @@ android {
         }
     }
 
-    preBuild.dependsOn(prepareJSC, prepareHermes, prepareBoost, prepareDoubleConversion, prepareFmt, prepareFolly, prepareGlog, prepareLibevent, extractNativeDependencies)
+    preBuild.dependsOn(prepareJSC, prepareHermes, prepareV8, prepareBoost, prepareDoubleConversion, prepareFmt, prepareFolly, prepareGlog, prepareLibevent, extractNativeDependencies)
     preBuild.dependsOn("generateCodegenArtifactsFromSchema")
 
     sourceSets.main {
@@ -351,6 +368,10 @@ android {
     packagingOptions {
         exclude("META-INF/NOTICE")
         exclude("META-INF/LICENSE")
+
+        if (project.hasProperty('param') ? project.property('param').equals("excludeLibs") : false) {
+            exclude '**/*.so'
+        }
     }
 
     configurations {
